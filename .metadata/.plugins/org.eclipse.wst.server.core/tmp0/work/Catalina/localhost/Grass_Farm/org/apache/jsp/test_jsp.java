/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.58
 * Generated at: 2021-06-05 05:40:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("  <script src=\"https://apis.google.com/js/api:client.js\"></script>\r\n");
      out.write("  \r\n");
      out.write("  <script>\r\n");
      out.write("  var googleUser = {};\r\n");
      out.write("  var startApp = function() {\r\n");
      out.write("    gapi.load('auth2', function(){\r\n");
      out.write("      // Retrieve the singleton for the GoogleAuth library and set up the client.\r\n");
      out.write("      auth2 = gapi.auth2.init({\r\n");
      out.write("        client_id: '529393072584-snmlihbn3psu2a9buc9kobgrs924aqsn.apps.googleusercontent.com',\r\n");
      out.write("        cookiepolicy: 'single_host_origin',\r\n");
      out.write("        // Request scopes in addition to 'profile' and 'email'\r\n");
      out.write("        //scope: 'additional_scope'\r\n");
      out.write("      });\r\n");
      out.write("      attachSignin(document.getElementById('customBtn'));\r\n");
      out.write("    });\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  function attachSignin(element) {\r\n");
      out.write("    console.log(element.id);\r\n");
      out.write("    auth2.attachClickHandler(element, {},\r\n");
      out.write("        function(googleUser) {\r\n");
      out.write("    \tvar profile = googleUser.getBasicProfile();\r\n");
      out.write("  \t  \tconsole.log('ID: ' + profile.getId()); // Do not send to your backend! Use an ID token instead.\r\n");
      out.write("  \t  \tconsole.log('Name: ' + profile.getName());\r\n");
      out.write("  \t  \tconsole.log('Image URL: ' + profile.getImageUrl());\r\n");
      out.write("  \t  \tconsole.log('Email: ' + profile.getEmail());\r\n");
      out.write("        });\r\n");
      out.write("  }\r\n");
      out.write("  function signOut() {\r\n");
      out.write("      var auth2 = gapi.auth2.getAuthInstance();\r\n");
      out.write("      auth2.signOut().then(function () {\r\n");
      out.write("        console.log('User signed out.');\r\n");
      out.write("      });\r\n");
      out.write("      auth2.disconnect();\r\n");
      out.write("  }\r\n");
      out.write("  </script>\r\n");
      out.write("  <style type=\"text/css\">\r\n");
      out.write("    #gSignInWrapper{\r\n");
      out.write("\tfloat: left;\r\n");
      out.write("\twidth: 60%;\r\n");
      out.write("\theight: 40px;\r\n");
      out.write("\tmargin-left:20%;\t\r\n");
      out.write("\tmargin-right: 20%;\r\n");
      out.write("\tmargin-top: 5%;\r\n");
      out.write("\tborder-radius: 7px;\r\n");
      out.write("\tborder: thin solid #888;\r\n");
      out.write("\twhite-space: nowrap;\r\n");
      out.write("}\r\n");
      out.write(" span.icon {\r\n");
      out.write(" \tfloat: left;\r\n");
      out.write("      background: url('img/Google__Logo.png') transparent 5px 50% no-repeat;\r\n");
      out.write("      background-size: 30px 30px;\r\n");
      out.write("      display: inline-block;\r\n");
      out.write("      vertical-align: middle;\r\n");
      out.write("      width: 42px;\r\n");
      out.write("      height: 42px;\r\n");
      out.write("    }\r\n");
      out.write("#customBtn {\r\n");
      out.write("\tfloat: left;\r\n");
      out.write("    display: inline-block;\r\n");
      out.write("    width: 60%;\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tmargin-left: 20%;\r\n");
      out.write("\t\r\n");
      out.write("    \r\n");
      out.write("     \r\n");
      out.write("    }\r\n");
      out.write("    #customBtn:hover {\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("    }\r\n");
      out.write("   \r\n");
      out.write("    span.buttonText {\r\n");
      out.write("      display: inline-block;\r\n");
      out.write("      vertical-align: middle;\r\n");
      out.write("      padding-right: 42px;\r\n");
      out.write("      font-size: 14px;\r\n");
      out.write("      font-family: 'regular';\r\n");
      out.write("    }\r\n");
      out.write("  </style>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("  <!-- In the callback, you would hide the gSignInWrapper element on a\r\n");
      out.write("  successful sign in -->\r\n");
      out.write("  <div id=\"gSignInWrapper\">\r\n");
      out.write("       \t\t\t<span class=\"icon\"></span>\r\n");
      out.write("    \t\t\t<div id=\"customBtn\" class=\"customGPlusSignIn\">      \t\t\t\t\r\n");
      out.write("      \t\t\t\t<span class=\"buttonText\">구글로 로그인하기</span>\r\n");
      out.write("    \t\t\t</div>\r\n");
      out.write("  \t\t\t</div>\r\n");
      out.write("  \t\t\t<div id=\"name\"></div>\r\n");
      out.write("  \t\t\t<script>startApp();</script>\t\r\n");
      out.write("  \t\t\t<a href=\"#\" onclick=\"signOut();\">Sign out</a> \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
